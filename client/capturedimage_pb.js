// source: capturedimage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.capturedimage_api.v1.CapturedImage', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.CapturedImageRequest', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.CreateCapturedImageRequest', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.GeoPoint', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.RawImage', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.RawImageRequest', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.RoutePath', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.RoutePath.RoutePoint', null, global);
goog.exportSymbol('proto.capturedimage_api.v1.RoutePathRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.GeoPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.capturedimage_api.v1.GeoPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.GeoPoint.displayName = 'proto.capturedimage_api.v1.GeoPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.CapturedImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.capturedimage_api.v1.CapturedImage.repeatedFields_, null);
};
goog.inherits(proto.capturedimage_api.v1.CapturedImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.CapturedImage.displayName = 'proto.capturedimage_api.v1.CapturedImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.CapturedImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.capturedimage_api.v1.CapturedImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.CapturedImageRequest.displayName = 'proto.capturedimage_api.v1.CapturedImageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.RoutePath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.capturedimage_api.v1.RoutePath.repeatedFields_, null);
};
goog.inherits(proto.capturedimage_api.v1.RoutePath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.RoutePath.displayName = 'proto.capturedimage_api.v1.RoutePath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.capturedimage_api.v1.RoutePath.RoutePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.RoutePath.RoutePoint.displayName = 'proto.capturedimage_api.v1.RoutePath.RoutePoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.RoutePathRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.capturedimage_api.v1.RoutePathRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.RoutePathRequest.displayName = 'proto.capturedimage_api.v1.RoutePathRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.RawImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.capturedimage_api.v1.RawImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.RawImageRequest.displayName = 'proto.capturedimage_api.v1.RawImageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.RawImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.capturedimage_api.v1.RawImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.RawImage.displayName = 'proto.capturedimage_api.v1.RawImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.capturedimage_api.v1.CreateCapturedImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.capturedimage_api.v1.CreateCapturedImageRequest.displayName = 'proto.capturedimage_api.v1.CreateCapturedImageRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.GeoPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.GeoPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.GeoPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.GeoPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pb_long: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.GeoPoint}
 */
proto.capturedimage_api.v1.GeoPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.GeoPoint;
  return proto.capturedimage_api.v1.GeoPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.GeoPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.GeoPoint}
 */
proto.capturedimage_api.v1.GeoPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.GeoPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.GeoPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.GeoPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.GeoPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLong();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.capturedimage_api.v1.GeoPoint.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.GeoPoint} returns this
 */
proto.capturedimage_api.v1.GeoPoint.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double long = 2;
 * @return {number}
 */
proto.capturedimage_api.v1.GeoPoint.prototype.getLong = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.GeoPoint} returns this
 */
proto.capturedimage_api.v1.GeoPoint.prototype.setLong = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.capturedimage_api.v1.CapturedImage.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.CapturedImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.CapturedImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.CapturedImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gpsCoord: (f = msg.getGpsCoord()) && proto.capturedimage_api.v1.GeoPoint.toObject(includeInstance, f),
    countAngle: jspb.Message.getFieldWithDefault(msg, 4, 0),
    elevationAnglesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    pathRaw: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pathImage: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.CapturedImage}
 */
proto.capturedimage_api.v1.CapturedImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.CapturedImage;
  return proto.capturedimage_api.v1.CapturedImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.CapturedImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.CapturedImage}
 */
proto.capturedimage_api.v1.CapturedImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.capturedimage_api.v1.GeoPoint;
      reader.readMessage(value,proto.capturedimage_api.v1.GeoPoint.deserializeBinaryFromReader);
      msg.setGpsCoord(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCountAngle(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addElevationAngles(values[i]);
      }
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathRaw(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.CapturedImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.CapturedImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.CapturedImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGpsCoord();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.capturedimage_api.v1.GeoPoint.serializeBinaryToWriter
    );
  }
  f = message.getCountAngle();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getElevationAnglesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getPathRaw();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPathImage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 time = 2;
 * @return {number}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional GeoPoint gps_coord = 3;
 * @return {?proto.capturedimage_api.v1.GeoPoint}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.getGpsCoord = function() {
  return /** @type{?proto.capturedimage_api.v1.GeoPoint} */ (
    jspb.Message.getWrapperField(this, proto.capturedimage_api.v1.GeoPoint, 3));
};


/**
 * @param {?proto.capturedimage_api.v1.GeoPoint|undefined} value
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
*/
proto.capturedimage_api.v1.CapturedImage.prototype.setGpsCoord = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.clearGpsCoord = function() {
  return this.setGpsCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.hasGpsCoord = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 count_angle = 4;
 * @return {number}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.getCountAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.setCountAngle = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated float elevation_angles = 5;
 * @return {!Array<number>}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.getElevationAnglesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.setElevationAnglesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.addElevationAngles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.clearElevationAnglesList = function() {
  return this.setElevationAnglesList([]);
};


/**
 * optional string path_raw = 6;
 * @return {string}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.getPathRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.setPathRaw = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string path_image = 7;
 * @return {string}
 */
proto.capturedimage_api.v1.CapturedImage.prototype.getPathImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.capturedimage_api.v1.CapturedImage} returns this
 */
proto.capturedimage_api.v1.CapturedImage.prototype.setPathImage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.CapturedImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.CapturedImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.CapturedImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.CapturedImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.CapturedImageRequest}
 */
proto.capturedimage_api.v1.CapturedImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.CapturedImageRequest;
  return proto.capturedimage_api.v1.CapturedImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.CapturedImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.CapturedImageRequest}
 */
proto.capturedimage_api.v1.CapturedImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.CapturedImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.CapturedImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.CapturedImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.CapturedImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.capturedimage_api.v1.CapturedImageRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.CapturedImageRequest} returns this
 */
proto.capturedimage_api.v1.CapturedImageRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.capturedimage_api.v1.RoutePath.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.RoutePath.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.RoutePath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.RoutePath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RoutePath.toObject = function(includeInstance, msg) {
  var f, obj = {
    beginTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.capturedimage_api.v1.RoutePath.RoutePoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.RoutePath}
 */
proto.capturedimage_api.v1.RoutePath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.RoutePath;
  return proto.capturedimage_api.v1.RoutePath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.RoutePath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.RoutePath}
 */
proto.capturedimage_api.v1.RoutePath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBeginTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndTime(value);
      break;
    case 3:
      var value = new proto.capturedimage_api.v1.RoutePath.RoutePoint;
      reader.readMessage(value,proto.capturedimage_api.v1.RoutePath.RoutePoint.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.RoutePath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.RoutePath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.RoutePath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RoutePath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeginTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.capturedimage_api.v1.RoutePath.RoutePoint.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.RoutePath.RoutePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.RoutePath.RoutePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    gpsCoord: (f = msg.getGpsCoord()) && proto.capturedimage_api.v1.GeoPoint.toObject(includeInstance, f),
    capImageId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    capImageTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.RoutePath.RoutePoint}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.RoutePath.RoutePoint;
  return proto.capturedimage_api.v1.RoutePath.RoutePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.RoutePath.RoutePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.RoutePath.RoutePoint}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.capturedimage_api.v1.GeoPoint;
      reader.readMessage(value,proto.capturedimage_api.v1.GeoPoint.deserializeBinaryFromReader);
      msg.setGpsCoord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapImageId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapImageTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.RoutePath.RoutePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.RoutePath.RoutePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGpsCoord();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.capturedimage_api.v1.GeoPoint.serializeBinaryToWriter
    );
  }
  f = message.getCapImageId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCapImageTime();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional GeoPoint gps_coord = 1;
 * @return {?proto.capturedimage_api.v1.GeoPoint}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.getGpsCoord = function() {
  return /** @type{?proto.capturedimage_api.v1.GeoPoint} */ (
    jspb.Message.getWrapperField(this, proto.capturedimage_api.v1.GeoPoint, 1));
};


/**
 * @param {?proto.capturedimage_api.v1.GeoPoint|undefined} value
 * @return {!proto.capturedimage_api.v1.RoutePath.RoutePoint} returns this
*/
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.setGpsCoord = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.capturedimage_api.v1.RoutePath.RoutePoint} returns this
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.clearGpsCoord = function() {
  return this.setGpsCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.hasGpsCoord = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 cap_image_id = 2;
 * @return {number}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.getCapImageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RoutePath.RoutePoint} returns this
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.setCapImageId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 cap_image_time = 3;
 * @return {number}
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.getCapImageTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RoutePath.RoutePoint} returns this
 */
proto.capturedimage_api.v1.RoutePath.RoutePoint.prototype.setCapImageTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 begin_time = 1;
 * @return {number}
 */
proto.capturedimage_api.v1.RoutePath.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RoutePath} returns this
 */
proto.capturedimage_api.v1.RoutePath.prototype.setBeginTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 end_time = 2;
 * @return {number}
 */
proto.capturedimage_api.v1.RoutePath.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RoutePath} returns this
 */
proto.capturedimage_api.v1.RoutePath.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated RoutePoint points = 3;
 * @return {!Array<!proto.capturedimage_api.v1.RoutePath.RoutePoint>}
 */
proto.capturedimage_api.v1.RoutePath.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.capturedimage_api.v1.RoutePath.RoutePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.capturedimage_api.v1.RoutePath.RoutePoint, 3));
};


/**
 * @param {!Array<!proto.capturedimage_api.v1.RoutePath.RoutePoint>} value
 * @return {!proto.capturedimage_api.v1.RoutePath} returns this
*/
proto.capturedimage_api.v1.RoutePath.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.capturedimage_api.v1.RoutePath.RoutePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.capturedimage_api.v1.RoutePath.RoutePoint}
 */
proto.capturedimage_api.v1.RoutePath.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.capturedimage_api.v1.RoutePath.RoutePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.capturedimage_api.v1.RoutePath} returns this
 */
proto.capturedimage_api.v1.RoutePath.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.RoutePathRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.RoutePathRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.RoutePathRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RoutePathRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    beginTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.RoutePathRequest}
 */
proto.capturedimage_api.v1.RoutePathRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.RoutePathRequest;
  return proto.capturedimage_api.v1.RoutePathRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.RoutePathRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.RoutePathRequest}
 */
proto.capturedimage_api.v1.RoutePathRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBeginTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.RoutePathRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.RoutePathRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.RoutePathRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RoutePathRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeginTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 begin_time = 1;
 * @return {number}
 */
proto.capturedimage_api.v1.RoutePathRequest.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RoutePathRequest} returns this
 */
proto.capturedimage_api.v1.RoutePathRequest.prototype.setBeginTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 end_time = 2;
 * @return {number}
 */
proto.capturedimage_api.v1.RoutePathRequest.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RoutePathRequest} returns this
 */
proto.capturedimage_api.v1.RoutePathRequest.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.RawImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.RawImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RawImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    elevationAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.RawImageRequest}
 */
proto.capturedimage_api.v1.RawImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.RawImageRequest;
  return proto.capturedimage_api.v1.RawImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.RawImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.RawImageRequest}
 */
proto.capturedimage_api.v1.RawImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setElevationAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.RawImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.RawImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RawImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getElevationAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RawImageRequest} returns this
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 time = 2;
 * @return {number}
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RawImageRequest} returns this
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float elevation_angle = 3;
 * @return {number}
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.getElevationAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RawImageRequest} returns this
 */
proto.capturedimage_api.v1.RawImageRequest.prototype.setElevationAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.RawImage.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.RawImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.RawImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RawImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mimeType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    elevationAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.RawImage}
 */
proto.capturedimage_api.v1.RawImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.RawImage;
  return proto.capturedimage_api.v1.RawImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.RawImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.RawImage}
 */
proto.capturedimage_api.v1.RawImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setElevationAngle(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.RawImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.RawImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.RawImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.RawImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getElevationAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.capturedimage_api.v1.RawImage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.capturedimage_api.v1.RawImage} returns this
 */
proto.capturedimage_api.v1.RawImage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mime_type = 2;
 * @return {string}
 */
proto.capturedimage_api.v1.RawImage.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.capturedimage_api.v1.RawImage} returns this
 */
proto.capturedimage_api.v1.RawImage.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float elevation_angle = 3;
 * @return {number}
 */
proto.capturedimage_api.v1.RawImage.prototype.getElevationAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.capturedimage_api.v1.RawImage} returns this
 */
proto.capturedimage_api.v1.RawImage.prototype.setElevationAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.capturedimage_api.v1.RawImage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.capturedimage_api.v1.RawImage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.RawImage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.capturedimage_api.v1.RawImage} returns this
 */
proto.capturedimage_api.v1.RawImage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.capturedimage_api.v1.CreateCapturedImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.capturedimage_api.v1.CreateCapturedImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    capImage: (f = msg.getCapImage()) && proto.capturedimage_api.v1.CapturedImage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.capturedimage_api.v1.CreateCapturedImageRequest}
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.capturedimage_api.v1.CreateCapturedImageRequest;
  return proto.capturedimage_api.v1.CreateCapturedImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.capturedimage_api.v1.CreateCapturedImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.capturedimage_api.v1.CreateCapturedImageRequest}
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.capturedimage_api.v1.CapturedImage;
      reader.readMessage(value,proto.capturedimage_api.v1.CapturedImage.deserializeBinaryFromReader);
      msg.setCapImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.capturedimage_api.v1.CreateCapturedImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.capturedimage_api.v1.CreateCapturedImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCapImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.capturedimage_api.v1.CapturedImage.serializeBinaryToWriter
    );
  }
};


/**
 * optional CapturedImage cap_image = 1;
 * @return {?proto.capturedimage_api.v1.CapturedImage}
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.prototype.getCapImage = function() {
  return /** @type{?proto.capturedimage_api.v1.CapturedImage} */ (
    jspb.Message.getWrapperField(this, proto.capturedimage_api.v1.CapturedImage, 1));
};


/**
 * @param {?proto.capturedimage_api.v1.CapturedImage|undefined} value
 * @return {!proto.capturedimage_api.v1.CreateCapturedImageRequest} returns this
*/
proto.capturedimage_api.v1.CreateCapturedImageRequest.prototype.setCapImage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.capturedimage_api.v1.CreateCapturedImageRequest} returns this
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.prototype.clearCapImage = function() {
  return this.setCapImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.capturedimage_api.v1.CreateCapturedImageRequest.prototype.hasCapImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.capturedimage_api.v1);
