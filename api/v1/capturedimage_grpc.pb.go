// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageByElevationClient is the client API for ImageByElevation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageByElevationClient interface {
	// Get route
	GetRoutePath(ctx context.Context, in *RoutePathRequest, opts ...grpc.CallOption) (ImageByElevation_GetRoutePathClient, error)
	GetCapturedImage(ctx context.Context, in *CapturedImageRequest, opts ...grpc.CallOption) (*CapturedImage, error)
	GetRawImage(ctx context.Context, in *RawImageRequest, opts ...grpc.CallOption) (ImageByElevation_GetRawImageClient, error)
	// Create CapturedImage, HTTP request body contains the resource
	CreateCapturedImage(ctx context.Context, in *CreateCapturedImageRequest, opts ...grpc.CallOption) (*CapturedImage, error)
}

type imageByElevationClient struct {
	cc grpc.ClientConnInterface
}

func NewImageByElevationClient(cc grpc.ClientConnInterface) ImageByElevationClient {
	return &imageByElevationClient{cc}
}

func (c *imageByElevationClient) GetRoutePath(ctx context.Context, in *RoutePathRequest, opts ...grpc.CallOption) (ImageByElevation_GetRoutePathClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageByElevation_ServiceDesc.Streams[0], "/capturedimage_api.v1.ImageByElevation/GetRoutePath", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageByElevationGetRoutePathClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageByElevation_GetRoutePathClient interface {
	Recv() (*RoutePath, error)
	grpc.ClientStream
}

type imageByElevationGetRoutePathClient struct {
	grpc.ClientStream
}

func (x *imageByElevationGetRoutePathClient) Recv() (*RoutePath, error) {
	m := new(RoutePath)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageByElevationClient) GetCapturedImage(ctx context.Context, in *CapturedImageRequest, opts ...grpc.CallOption) (*CapturedImage, error) {
	out := new(CapturedImage)
	err := c.cc.Invoke(ctx, "/capturedimage_api.v1.ImageByElevation/GetCapturedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageByElevationClient) GetRawImage(ctx context.Context, in *RawImageRequest, opts ...grpc.CallOption) (ImageByElevation_GetRawImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageByElevation_ServiceDesc.Streams[1], "/capturedimage_api.v1.ImageByElevation/GetRawImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageByElevationGetRawImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageByElevation_GetRawImageClient interface {
	Recv() (*RawImage, error)
	grpc.ClientStream
}

type imageByElevationGetRawImageClient struct {
	grpc.ClientStream
}

func (x *imageByElevationGetRawImageClient) Recv() (*RawImage, error) {
	m := new(RawImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageByElevationClient) CreateCapturedImage(ctx context.Context, in *CreateCapturedImageRequest, opts ...grpc.CallOption) (*CapturedImage, error) {
	out := new(CapturedImage)
	err := c.cc.Invoke(ctx, "/capturedimage_api.v1.ImageByElevation/CreateCapturedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageByElevationServer is the server API for ImageByElevation service.
// All implementations must embed UnimplementedImageByElevationServer
// for forward compatibility
type ImageByElevationServer interface {
	// Get route
	GetRoutePath(*RoutePathRequest, ImageByElevation_GetRoutePathServer) error
	GetCapturedImage(context.Context, *CapturedImageRequest) (*CapturedImage, error)
	GetRawImage(*RawImageRequest, ImageByElevation_GetRawImageServer) error
	// Create CapturedImage, HTTP request body contains the resource
	CreateCapturedImage(context.Context, *CreateCapturedImageRequest) (*CapturedImage, error)
	mustEmbedUnimplementedImageByElevationServer()
}

// UnimplementedImageByElevationServer must be embedded to have forward compatible implementations.
type UnimplementedImageByElevationServer struct {
}

func (UnimplementedImageByElevationServer) GetRoutePath(*RoutePathRequest, ImageByElevation_GetRoutePathServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRoutePath not implemented")
}
func (UnimplementedImageByElevationServer) GetCapturedImage(context.Context, *CapturedImageRequest) (*CapturedImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapturedImage not implemented")
}
func (UnimplementedImageByElevationServer) GetRawImage(*RawImageRequest, ImageByElevation_GetRawImageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRawImage not implemented")
}
func (UnimplementedImageByElevationServer) CreateCapturedImage(context.Context, *CreateCapturedImageRequest) (*CapturedImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCapturedImage not implemented")
}
func (UnimplementedImageByElevationServer) mustEmbedUnimplementedImageByElevationServer() {}

// UnsafeImageByElevationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageByElevationServer will
// result in compilation errors.
type UnsafeImageByElevationServer interface {
	mustEmbedUnimplementedImageByElevationServer()
}

func RegisterImageByElevationServer(s grpc.ServiceRegistrar, srv ImageByElevationServer) {
	s.RegisterService(&ImageByElevation_ServiceDesc, srv)
}

func _ImageByElevation_GetRoutePath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoutePathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageByElevationServer).GetRoutePath(m, &imageByElevationGetRoutePathServer{stream})
}

type ImageByElevation_GetRoutePathServer interface {
	Send(*RoutePath) error
	grpc.ServerStream
}

type imageByElevationGetRoutePathServer struct {
	grpc.ServerStream
}

func (x *imageByElevationGetRoutePathServer) Send(m *RoutePath) error {
	return x.ServerStream.SendMsg(m)
}

func _ImageByElevation_GetCapturedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapturedImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageByElevationServer).GetCapturedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capturedimage_api.v1.ImageByElevation/GetCapturedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageByElevationServer).GetCapturedImage(ctx, req.(*CapturedImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageByElevation_GetRawImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageByElevationServer).GetRawImage(m, &imageByElevationGetRawImageServer{stream})
}

type ImageByElevation_GetRawImageServer interface {
	Send(*RawImage) error
	grpc.ServerStream
}

type imageByElevationGetRawImageServer struct {
	grpc.ServerStream
}

func (x *imageByElevationGetRawImageServer) Send(m *RawImage) error {
	return x.ServerStream.SendMsg(m)
}

func _ImageByElevation_CreateCapturedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCapturedImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageByElevationServer).CreateCapturedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capturedimage_api.v1.ImageByElevation/CreateCapturedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageByElevationServer).CreateCapturedImage(ctx, req.(*CreateCapturedImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageByElevation_ServiceDesc is the grpc.ServiceDesc for ImageByElevation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageByElevation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capturedimage_api.v1.ImageByElevation",
	HandlerType: (*ImageByElevationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapturedImage",
			Handler:    _ImageByElevation_GetCapturedImage_Handler,
		},
		{
			MethodName: "CreateCapturedImage",
			Handler:    _ImageByElevation_CreateCapturedImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRoutePath",
			Handler:       _ImageByElevation_GetRoutePath_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRawImage",
			Handler:       _ImageByElevation_GetRawImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "capturedimage.proto",
}
